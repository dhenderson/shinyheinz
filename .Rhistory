"1" = "Rear-end",
"2" = "Head-on",
"3" = "Rear-to-rear (Backing",
"4" = "Angle",
"5" = "Sideswipe (same dir.)",
"6" = "Sideswipe (Opposite dir.)",
"7" = "Hit fixed object",
"8" = "Hit pedestrian",
"9" = "Other or Unkown"
)
codeCollision <- function(code, code.collision){
code = as.character(code)
code.collision[code]
}
codeCollision(0)
codeCollision(0, code.collision)
codeCollision <- function(code){
code.collision <- list(
"0" = "Non collision",
"1" = "Rear-end",
"2" = "Head-on",
"3" = "Rear-to-rear (Backing",
"4" = "Angle",
"5" = "Sideswipe (same dir.)",
"6" = "Sideswipe (Opposite dir.)",
"7" = "Hit fixed object",
"8" = "Hit pedestrian",
"9" = "Other or Unkown"
)
code = as.character(code)
code.collision[[code]]
}
codeCollision(0)
codeCollision <- function(code){
code.collision <- list(
"0" = "Non collision",
"1" = "Rear-end",
"2" = "Head-on",
"3" = "Rear-to-rear (Backing",
"4" = "Angle",
"5" = "Sideswipe (same dir.)",
"6" = "Sideswipe (Opposite dir.)",
"7" = "Hit fixed object",
"8" = "Hit pedestrian",
"9" = "Other or Unkown"
)
code = as.character(code)
code.collision[[code]][1]
}
codeCollision(0)
crashes$COLLISION_TYPE_DECODE <- sapply(crashes$COLLISION_TYPE, codeCollision)
summary(crashes$COLLISION_TYPE_DECODE)
crashes$COLLISION_TYPE_DECODE <- as.factor(sapply(crashes$COLLISION_TYPE, codeCollision))
summary(crashes$COLLISION_TYPE_DECODE)
codeWeather <- function(code){
#' Get the string weather representation for
#' the coded weather
#' @param code Numeric weather code.
#' @return String weather description.
code.weather <- list(
"1" = "No adverse conditions",
"2" = "Rain",
"3" = "Sleet (hail)",
"4" = "Snow",
"5" = "Fog",
"6" = "Rain and fog",
"7" = "Sleet and fog",
"8" = "Other",
"9" = "Unkown"
)
code = as.character(code)
code.weather[[code]]
}
crashes$WEATHER_DECODE <- as.factor(sapply(crashes$WEATHER, codeWeather))
crashes <- select(crashes, COLLISION_TYPE_DECODE, FATAL_OR_MAJOR_INJ,
DAY_OF_WEEK, CRASH_MONTH, CELL_PHONE, IMPAIRED_DRIVER,
FATIGUE_ASLEEP, SPEEDING_RELATED,
WEATHER_DECODE, SPEED_LIMIT, DEC_LAT, DEC_LONG)
crashes <- select(crashes, COLLISION_TYPE_DECODE, FATAL_OR_MAJ_INJ,
DAY_OF_WEEK, CRASH_MONTH, CELL_PHONE, IMPAIRED_DRIVER,
FATIGUE_ASLEEP, SPEEDING_RELATED,
WEATHER_DECODE, SPEED_LIMIT, DEC_LAT, DEC_LONG)
write.csv(crashes, "data/crashes_2015_clean.csv")
crashes %>%
dplyr::group_by(COLLISION_TYPE_DECODE) %>%
dplyr::summarise(
count_crashes = n()
) %>%
ggplot(aes(x=SPEED_LIMIT, Y=count_crashes, color=COLLISION_TYPE_DECODE)) +
geom_point() +
geom_line()
crashes %>%
dplyr::group_by(COLLISION_TYPE_DECODE, SPEED_LIMIT) %>%
dplyr::summarise(
count_crashes = n()
) %>%
ggplot(aes(x=SPEED_LIMIT, Y=count_crashes, color=COLLISION_TYPE_DECODE)) +
geom_point() +
geom_line()
crashes %>%
dplyr::group_by(COLLISION_TYPE_DECODE, SPEED_LIMIT) %>%
dplyr::summarise(
count_crashes = n()
) %>%
ggplot(aes(x=SPEED_LIMIT, y=count_crashes, color=COLLISION_TYPE_DECODE)) +
geom_point() +
geom_line()
hist(crashes$SPEED_LIMIT)
summary(crashes$SPEED_LIMIT)
crashes %>%
dplyr::group_by(COLLISION_TYPE_DECODE, SPEED_LIMIT) %>%
dplyr::summarise(
count_crashes = n()
) %>%
ggplot(aes(x=SPEED_LIMIT, y=count_crashes, color=COLLISION_TYPE_DECODE)) +
geom_point() +
geom_line()
summary(crashes$FATAL_OR_MAJ_INJ)
as.logical(1)
as.logical(0)
crashes$FATAL_OR_MAJ_INJ <- as.logical(crashes$FATAL_OR_MAJ_INJ)
crashes %>%
dplyr::group_by(FATAL_OR_MAJ_INJ, SPEED_LIMIT) %>%
dplyr::summarise(
count_crashes = n()
) %>%
ggplot(aes(x=SPEED_LIMIT, y=count_crashes, color=FATAL_OR_MAJ_INJ)) +
geom_point() +
geom_line()
library(leaflet)
lm(FATAL_OR_MAJ_INJ~SPEED_LIMIT)
lm(FATAL_OR_MAJ_INJ~SPEED_LIMIT, data=crashes)
summary(lm(FATAL_OR_MAJ_INJ~SPEED_LIMIT, data=crashes))
summary(glm(FATAL_OR_MAJ_INJ~SPEED_LIMIT, data=crashes))
leaflet(data=crashes) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(~DEC_LONG, ~DEC_LAT, popup = ~FATAL_OR_MAJ_INJ)
?addLayersControl
leaflet(data=crashes) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(~DEC_LONG, ~DEC_LAT,
popup = ~FATAL_OR_MAJ_INJ,
clusterOptions = markerClusterOptions())
summary(crashes$CELL_PHONE)
library(dplyr)
library(ggplot2)
library(readr)
library(leaflet)
# preprocess the data ------
crashes <- readr::read_csv("data/crashes_2015.csv")
codeCollision <- function(code){
#' Get the string collision representation for
#' the coded collision
#' @param code Numeric collision code.
#' @return String collision description.
code.collision <- list(
"0" = "Non collision",
"1" = "Rear-end",
"2" = "Head-on",
"3" = "Rear-to-rear (Backing",
"4" = "Angle",
"5" = "Sideswipe (same dir.)",
"6" = "Sideswipe (Opposite dir.)",
"7" = "Hit fixed object",
"8" = "Hit pedestrian",
"9" = "Other or Unkown"
)
code = as.character(code)
code.collision[[code]]
}
codeWeather <- function(code){
#' Get the string weather representation for
#' the coded weather
#' @param code Numeric weather code.
#' @return String weather description.
code.weather <- list(
"1" = "No adverse conditions",
"2" = "Rain",
"3" = "Sleet (hail)",
"4" = "Snow",
"5" = "Fog",
"6" = "Rain and fog",
"7" = "Sleet and fog",
"8" = "Other",
"9" = "Unkown"
)
code = as.character(code)
code.weather[[code]]
}
# decode the collisions
crashes$COLLISION_TYPE <- as.factor(sapply(crashes$COLLISION_TYPE, codeCollision))
# decode the weather
crashes$WEATHER <- as.factor(sapply(crashes$WEATHER, codeWeather))
# int to bool
crashes$FATAL_OR_MAJ_INJ <- as.logical(crashes$FATAL_OR_MAJ_INJ)
crashes$CELL_PHONE <- as.logical(crashes$CELL_PHONE)
crashes$IMPAIRED_DRIVER <- as.logical(crashes$IMPAIRED_DRIVER)
crashes$FATIGUE_ASLEEP <- as.logical(crashes$FATIGUE_ASLEEP)
crashes$SPEEDING_RELATED <- as.logical(crashes$SPEEDING_RELATED)
# select the variables we care about
crashes <- select(crashes, COLLISION_TYPE, FATAL_OR_MAJ_INJ,
DAY_OF_WEEK, CRASH_MONTH, CELL_PHONE, IMPAIRED_DRIVER,
FATIGUE_ASLEEP, SPEEDING_RELATED,
WEATHER, SPEED_LIMIT, DEC_LAT, DEC_LONG)
write.csv(crashes, "data/crashes_2015_clean.csv")
# create some charts -----
crashes %>%
dplyr::group_by(FATAL_OR_MAJ_INJ, SPEED_LIMIT) %>%
dplyr::summarise(
count_crashes = n()
) %>%
ggplot(aes(x=SPEED_LIMIT, y=count_crashes, color=FATAL_OR_MAJ_INJ)) +
geom_point() +
geom_line()
# create a map --------
leaflet(data=crashes) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(~DEC_LONG, ~DEC_LAT,
popup = ~FATAL_OR_MAJ_INJ,
clusterOptions = markerClusterOptions())
?markerClusterOptions
?addTiles
summary(crashes$SPEED_LIMIT)
?sliderInput
library(shiny)
?sliderInput
library(shiny)
?sliderInput
runApp()
runApp()
runApp()
?leafletOutput
runApp()
runApp()
runApp()
runApp()
install.packages(c("shiny", "shinyjs"))
shiny::runApp()
?markerClusterOptions
runApp()
?addMarkers
library(dplyr)
library(ggplot2)
library(readr)
library(leaflet)
# preprocess the data ------
crashes <- readr::read_csv("data/crashes_2015.csv")
codeCollision <- function(code){
#' Get the string collision representation for
#' the coded collision
#' @param code Numeric collision code.
#' @return String collision description.
code.collision <- list(
"0" = "Non collision",
"1" = "Rear-end",
"2" = "Head-on",
"3" = "Rear-to-rear (Backing",
"4" = "Angle",
"5" = "Sideswipe (same dir.)",
"6" = "Sideswipe (Opposite dir.)",
"7" = "Hit fixed object",
"8" = "Hit pedestrian",
"9" = "Other or Unkown"
)
code = as.character(code)
code.collision[[code]]
}
codeWeather <- function(code){
#' Get the string weather representation for
#' the coded weather
#' @param code Numeric weather code.
#' @return String weather description.
code.weather <- list(
"1" = "No adverse conditions",
"2" = "Rain",
"3" = "Sleet (hail)",
"4" = "Snow",
"5" = "Fog",
"6" = "Rain and fog",
"7" = "Sleet and fog",
"8" = "Other",
"9" = "Unkown"
)
code = as.character(code)
code.weather[[code]]
}
# decode the collisions
crashes$COLLISION_TYPE <- as.factor(sapply(crashes$COLLISION_TYPE, codeCollision))
# decode the weather
crashes$WEATHER <- as.factor(sapply(crashes$WEATHER, codeWeather))
# int to bool
crashes$FATAL_OR_MAJ_INJ <- as.logical(crashes$FATAL_OR_MAJ_INJ)
crashes$CELL_PHONE <- as.logical(crashes$CELL_PHONE)
crashes$IMPAIRED_DRIVER <- as.logical(crashes$IMPAIRED_DRIVER)
crashes$FATIGUE_ASLEEP <- as.logical(crashes$FATIGUE_ASLEEP)
crashes$SPEEDING_RELATED <- as.logical(crashes$SPEEDING_RELATED)
# select the variables we care about
crashes <- select(crashes, COLLISION_TYPE, FATAL_OR_MAJ_INJ,
DAY_OF_WEEK, CRASH_MONTH, CELL_PHONE, IMPAIRED_DRIVER,
FATIGUE_ASLEEP, SPEEDING_RELATED,
WEATHER, SPEED_LIMIT, DEC_LAT, DEC_LONG)
write.csv(crashes, "data/crashes_2015_clean.csv")
# create some charts -----
crashes %>%
dplyr::group_by(FATAL_OR_MAJ_INJ, SPEED_LIMIT) %>%
dplyr::summarise(
count_crashes = n()
) %>%
ggplot(aes(x=SPEED_LIMIT, y=count_crashes, color=FATAL_OR_MAJ_INJ)) +
geom_point() +
geom_line()
?addCircleMarkers
leaflet(data=crashes) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(
lng=~DEC_LONG,
lat=~DEC_LAT,
color = ~FATAL_OR_MAJ_INJ,
stroke = FALSE, fillOpacity = 0.5
)
leaflet(data=crashes) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(
lng=~DEC_LONG,
lat=~DEC_LAT,
color=~FATAL_OR_MAJ_INJ,
stroke = FALSE, fillOpacity = 0.5,
size=1
)
?addCircleMarkers
leaflet(data=crashes) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(
lng=~DEC_LONG,
lat=~DEC_LAT,
color=~FATAL_OR_MAJ_INJ,
stroke = FALSE, fillOpacity = 0.5,
weight=3,
group=T
)
leaflet(data=crashes) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(
lng=~DEC_LONG,
lat=~DEC_LAT,
color=~FATAL_OR_MAJ_INJ,
stroke = FALSE, fillOpacity = 0.5,
weight=1,
group=T
)
leaflet(data=crashes) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(
lng=~DEC_LONG,
lat=~DEC_LAT,
color=~FATAL_OR_MAJ_INJ,
stroke = FALSE, fillOpacity = 0.5,
weight=10,
group=T
)
leaflet(data=crashes) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(
lng=~DEC_LONG,
lat=~DEC_LAT,
color=~FATAL_OR_MAJ_INJ,
stroke = FALSE, fillOpacity = 0.25,
group=T
)
pal <- colorFactor(c("navy", "red"), domain = c(F, T))
leaflet(data=crashes) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(
lng=~DEC_LONG,
lat=~DEC_LAT,
color=~pal(FATAL_OR_MAJ_INJ),
stroke = FALSE, fillOpacity = 0.25,
group=T
)
leaflet(data=crashes) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(
lng=~DEC_LONG,
lat=~DEC_LAT,
color=~pal(FATAL_OR_MAJ_INJ),
stroke = FALSE, fillOpacity = 0.25,
radius=6
)
pal <- colorFactor(c("#0000FF", "#FF0000"), domain = c(F, T))
leaflet(data=crashes) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(
lng=~DEC_LONG,
lat=~DEC_LAT,
color=~pal(FATAL_OR_MAJ_INJ),
stroke = FALSE, fillOpacity = 0.25,
radius=6
)
leaflet(data=crashes) %>%
#addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
lng=~DEC_LONG,
lat=~DEC_LAT,
color=~pal(FATAL_OR_MAJ_INJ),
stroke = FALSE, fillOpacity = 0.25,
radius=6
)
summary(crashes$FATAL_OR_MAJ_INJ)
leaflet(data=crashes) %>%
#addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
lng=~DEC_LONG,
lat=~DEC_LAT,
color=~pal(FATAL_OR_MAJ_INJ),
stroke = FALSE, fillOpacity = 0.5,
radius=6
)
leaflet(data=crashes) %>%
#addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
lng=~DEC_LONG,
lat=~DEC_LAT,
color=~pal(SPEEDING_RELATED),
stroke = FALSE, fillOpacity = 0.5,
radius=6
)
leaflet(data=crashes) %>%
#addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
lng=~DEC_LONG,
lat=~DEC_LAT,
color=~pal(SPEEDING_RELATED),
stroke = FALSE, fillOpacity = 0.25,
radius=6
)
leaflet(data=crashes) %>%
#addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
lng=~DEC_LONG,
lat=~DEC_LAT,
color=~pal(SPEEDING_RELATED),
stroke = FALSE, fillOpacity = 0.25,
radius=3
)
leaflet(data=crashes) %>%
#addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
lng=~DEC_LONG,
lat=~DEC_LAT,
color=~pal(SPEEDING_RELATED),
stroke = FALSE, fillOpacity = 0.5,
radius=3
)
leaflet(data=crashes) %>%
#addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
lng=~DEC_LONG,
lat=~DEC_LAT,
color=~pal(SPEEDING_RELATED),
stroke = FALSE, fillOpacity = 0.5,
radius=5
)
leaflet(data=crashes) %>%
#addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
lng=~DEC_LONG,
lat=~DEC_LAT,
color=~pal(SPEEDING_RELATED),
stroke = FALSE, fillOpacity = 0.5,
radius=5,
clusterOptions = markerClusterOptions()
)
?req
?markerClusterOptions
leaflet(data=crashes) %>%
#addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
lng=~DEC_LONG,
lat=~DEC_LAT,
color=~pal(SPEEDING_RELATED),
stroke = FALSE, fillOpacity = 0.5,
radius=5,
clusterOptions = markerClusterOptions()
)
runApp()
runApp()
leaflet(data=crashes) %>%
#addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(
lng=~DEC_LONG,
lat=~DEC_LAT,
color=~pal(SPEEDING_RELATED),
stroke = FALSE, fillOpacity = 0.5,
radius=5
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
